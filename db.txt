CREATE TABLE Users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(255),
  email VARCHAR(255),
  reset_token VARCHAR(255),	
  token_expiry DATETIME,	
  password VARCHAR(255) NOT NULL
  
);

CREATE TABLE Wallets (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  name VARCHAR(255),
  type VARCHAR(255),
  balance DECIMAL(15,2) DEFAULT 0,
  currency VARCHAR(50),
  created_at DATETIME,
  edit_at DATETIME,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Categories (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  icon VARCHAR(255),
  type VARCHAR(50),
  user_id INT,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Transactions (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  wallet_id INT,
  category_id INT,
  amount FLOAT,
  type VARCHAR(50),
  date DATETIME,
  note VARCHAR(500),
  photo_receipt_url VARCHAR(500),
  emotion_level INT,
  latitude FLOAT,
  longitude FLOAT,
  created_at DATETIME,
  edit_at DATETIME,
  FOREIGN KEY (user_id) REFERENCES Users(id),
  FOREIGN KEY (wallet_id) REFERENCES Wallets(id),
  FOREIGN KEY (category_id) REFERENCES Categories(id)
);

CREATE TABLE Tags (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  user_id INT,
  icon VARCHAR(100),
  created_at DATETIME,
  edit_at DATETIME,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Transaction_Tags (
  transaction_id INT AUTO_INCREMENT,
  tag_id INT,
  PRIMARY KEY (transaction_id, tag_id),
  FOREIGN KEY (transaction_id) REFERENCES Transactions(id),
  FOREIGN KEY (tag_id) REFERENCES Tags(id)
);

CREATE TABLE Budgets (
  id INT PRIMARY KEY,
  user_id INT,
  category_id INT,
  wallet_id INT,
  month VARCHAR(20),
  limit_amount FLOAT,
  created_at DATETIME,
  FOREIGN KEY (user_id) REFERENCES Users(id),
  FOREIGN KEY (category_id) REFERENCES Categories(id),
  FOREIGN KEY (wallet_id) REFERENCES Wallets(id)
);

CREATE TABLE Reminders (
  id INT PRIMARY KEY,
  user_id INT,
  content VARCHAR(500),
  remind_date DATETIME,
  repeat_interval VARCHAR(50),
  is_done BOOLEAN,
  created_at DATETIME,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Notes (
  id INT PRIMARY KEY,
  user_id INT,
  title VARCHAR(255),
  content TEXT,
  date DATETIME,
  emotion_level INT,
  created_at DATETIME,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Groups (
  id INT PRIMARY KEY,
  name VARCHAR(255),
  created_by INT,
  created_at DATETIME,
  FOREIGN KEY (created_by) REFERENCES Users(id)
);

CREATE TABLE Group_Members (
  group_id INT,
  user_id INT,
  role VARCHAR(50),
  joined_at DATETIME,
  PRIMARY KEY (group_id, user_id),
  FOREIGN KEY (group_id) REFERENCES Groups(id),
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Shared_Transactions (
  id INT PRIMARY KEY,
  group_id INT,
  created_by INT,
  amount FLOAT,
  description VARCHAR(500),
  date DATETIME,
  split_type VARCHAR(50),
  FOREIGN KEY (group_id) REFERENCES Groups(id),
  FOREIGN KEY (created_by) REFERENCES Users(id)
);

CREATE TABLE Shared_Transaction_Participants (
  shared_transaction_id INT,
  user_id INT,
  share_amount FLOAT,
  PRIMARY KEY (shared_transaction_id, user_id),
  FOREIGN KEY (shared_transaction_id) REFERENCES Shared_Transactions(id),
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Bank_Accounts (
  id INT PRIMARY KEY,
  user_id INT,
  bank_name VARCHAR(255),
  account_number VARCHAR(255),
  api_provider VARCHAR(100),
  connected_at DATETIME,
  access_token TEXT,
  refresh_token TEXT,
  token_expiry DATETIME,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Bank_Transactions (
  id INT PRIMARY KEY,
  bank_account_id INT,
  external_transaction_id VARCHAR(255),
  amount FLOAT,
  description VARCHAR(500),
  transaction_date DATETIME,
  category_id INT,
  matched_with_transaction_id INT,
  FOREIGN KEY (bank_account_id) REFERENCES Bank_Accounts(id),
  FOREIGN KEY (category_id) REFERENCES Categories(id),
  FOREIGN KEY (matched_with_transaction_id) REFERENCES Transactions(id)
);

CREATE TABLE AI_Interactions (
  id INT PRIMARY KEY,
  user_id INT,
  input_text TEXT,
  ai_response TEXT,
  intent VARCHAR(100),
  timestamp DATETIME,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE Analytics_Logs (
  id INT PRIMARY KEY,
  user_id INT,
  report_type VARCHAR(100),
  generated_at DATETIME,
  content_json TEXT,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);
